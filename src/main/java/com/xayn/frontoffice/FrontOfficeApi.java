/*
 * Front Office API
 * # Front Office The system identifies a user with only an id. There are two main endpoints: one that allows registering an interaction between a user and a document (a user clicked or liked a document), and one to retrieve a personalized set of documents for the user. The system needs a few user interactions with documents before it can generate a personalized list.  # Auth To authenticate with the API, a token will be provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xayn.frontoffice;

import com.xayn.frontoffice.ApiCallback;
import com.xayn.frontoffice.ApiClient;
import com.xayn.frontoffice.ApiException;
import com.xayn.frontoffice.ApiResponse;
import com.xayn.frontoffice.Configuration;
import com.xayn.frontoffice.Pair;
import com.xayn.frontoffice.ProgressRequestBody;
import com.xayn.frontoffice.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.xayn.frontoffice.models.PersonalizedDocumentsError;
import com.xayn.frontoffice.models.PersonalizedDocumentsResponse;
import com.xayn.frontoffice.models.UserInteractionError;
import com.xayn.frontoffice.models.UserInteractionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FrontOfficeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FrontOfficeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FrontOfficeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for documentInteraction
     * @param userId Id of the user (required)
     * @param userInteractionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request. User or document id is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInteractionCall(String userId, UserInteractionRequest userInteractionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userInteractionRequest;

        // create path and map variables
        String localVarPath = "/users/{user_id}/interactions"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call documentInteractionValidateBeforeCall(String userId, UserInteractionRequest userInteractionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling documentInteraction(Async)");
        }

        return documentInteractionCall(userId, userInteractionRequest, _callback);

    }

    /**
     * Add interaction between a user and a document
     * The interaction is used to provide personalized documents to the user.
     * @param userId Id of the user (required)
     * @param userInteractionRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request. User or document id is invalid </td><td>  -  </td></tr>
     </table>
     */
    public void documentInteraction(String userId, UserInteractionRequest userInteractionRequest) throws ApiException {
        documentInteractionWithHttpInfo(userId, userInteractionRequest);
    }

    /**
     * Add interaction between a user and a document
     * The interaction is used to provide personalized documents to the user.
     * @param userId Id of the user (required)
     * @param userInteractionRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request. User or document id is invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> documentInteractionWithHttpInfo(String userId, UserInteractionRequest userInteractionRequest) throws ApiException {
        okhttp3.Call localVarCall = documentInteractionValidateBeforeCall(userId, userInteractionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add interaction between a user and a document (asynchronously)
     * The interaction is used to provide personalized documents to the user.
     * @param userId Id of the user (required)
     * @param userInteractionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid request. User or document id is invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call documentInteractionAsync(String userId, UserInteractionRequest userInteractionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = documentInteractionValidateBeforeCall(userId, userInteractionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPersonalizedDocuments
     * @param userId Id of the user (required)
     * @param count Maximum number of personalized documents to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid user id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> impossible to create a personalized list for the user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalizedDocumentsCall(String userId, Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{user_id}/personalized_documents"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonalizedDocumentsValidateBeforeCall(String userId, Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getPersonalizedDocuments(Async)");
        }

        return getPersonalizedDocumentsCall(userId, count, _callback);

    }

    /**
     * Get personalized documents for the user
     * Returns a list of documents personalized for the given &#x60;user_id&#x60;. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
     * @param userId Id of the user (required)
     * @param count Maximum number of personalized documents to return (optional, default to 10)
     * @return PersonalizedDocumentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid user id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> impossible to create a personalized list for the user. </td><td>  -  </td></tr>
     </table>
     */
    public PersonalizedDocumentsResponse getPersonalizedDocuments(String userId, Integer count) throws ApiException {
        ApiResponse<PersonalizedDocumentsResponse> localVarResp = getPersonalizedDocumentsWithHttpInfo(userId, count);
        return localVarResp.getData();
    }

    /**
     * Get personalized documents for the user
     * Returns a list of documents personalized for the given &#x60;user_id&#x60;. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
     * @param userId Id of the user (required)
     * @param count Maximum number of personalized documents to return (optional, default to 10)
     * @return ApiResponse&lt;PersonalizedDocumentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid user id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> impossible to create a personalized list for the user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PersonalizedDocumentsResponse> getPersonalizedDocumentsWithHttpInfo(String userId, Integer count) throws ApiException {
        okhttp3.Call localVarCall = getPersonalizedDocumentsValidateBeforeCall(userId, count, null);
        Type localVarReturnType = new TypeToken<PersonalizedDocumentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get personalized documents for the user (asynchronously)
     * Returns a list of documents personalized for the given &#x60;user_id&#x60;. Each document contains the id, the score and the properties that are attached to the document. The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
     * @param userId Id of the user (required)
     * @param count Maximum number of personalized documents to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid user id. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> user not found. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> impossible to create a personalized list for the user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPersonalizedDocumentsAsync(String userId, Integer count, final ApiCallback<PersonalizedDocumentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonalizedDocumentsValidateBeforeCall(userId, count, _callback);
        Type localVarReturnType = new TypeToken<PersonalizedDocumentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
