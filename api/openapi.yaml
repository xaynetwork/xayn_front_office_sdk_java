openapi: 3.0.3
info:
  description: |-
    # Front Office
    The front office is typically used within front-end apps, for example a website or a mobile application.
    With this SDK, you can handle interactions with documents and request a list of personalized documents.

    ## User
    Each method requires a `user_id`.
    From our perspective, a `user_id` is simply required to group interactions together. We don't need to know who that user is, so it is preferred to create this `user_id` in a privacy-preserving way.
    For example, create a hash method which transforms your user into an ID hash.

    ## Document
    A document here is represented by its `id` and optional `properties`.
    In order to display a document in an interface, it's preferred to use `properties`, which is an arbitrary collection of values.
    For example, it could contain an image url, a full article url, the publication date, the author or much more.
    The properties that were added when the document was submitted to us, are just mirrored here.

    ## Auth
    The API requires an authenticationToken when used.
    Please see further down in this README.md file, or refer to the test included in this SDK's codebase, on how to set this token correctly.
    \
  title: Front Office API
  version: 1.0.0-rc9
servers:
- url: /
security:
- ApiKeyAuth: []
tags:
- description: Handles interactions between users and documents and allows to fetch
    personalized documents per user.
  name: front office
paths:
  /personalized_documents:
    post:
      description: |-
        Returns a list of personalized documents based on interests derived
        from a history. In difference to `getPersonalizedDocuments` any user
        specific parts are based on the inputs only. Documents still need to
        be ingested beforehand.
      operationId: getStatelessPersonalizedDocuments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatelessPersonalizedDocumentsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatelessPersonalizedDocumentsResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsError'
          description: |-
            -| impossible to create a personalized list for given context
            This mainly can happen if all documents in the user history do no longer exist (or were never ingested).
      summary: Get personalized documents based on a given history.
      tags:
      - front office
      x-content-type: application/json
      x-accepts: application/json
  /users/{user_id}/personalized_documents:
    get:
      description: |-
        Returns a list of documents personalized for the given `user_id`.
        Each document contains the id, the score and the properties that are attached to the document.
        The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
        Documents that have been interacted with by the user are filtered out from the result.
        Note that you can request personalized documents for a specific `user_id`, only after that same `user_id` has made enough interactions via our system.
      operationId: getPersonalizedDocuments
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - description: Maximum number of personalized documents to return
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: |-
          Only include documents which have been published after given datetime.

          If used documents without a `properties.publication_date` will be ignored.
        explode: true
        in: query
        name: published_after
        required: false
        schema:
          $ref: '#/components/schemas/PublicationDate'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsError'
          description: impossible to create a personalized list for the user.
      summary: Gets personalized documents for the user.
      tags:
      - front office
      x-accepts: application/json
  /users/{user_id}/interactions:
    patch:
      description: |-
        Use this method to register an interaction between a user and a document.
        Currently, we only support a `Positive` interaction, which is equivalent to a user who "likes" a certain document.
        For web sites, consider triggering this method whenever a certain document url loads, preferably after the user spent some time on the page, in order to prevent false positives.
        For apps, consider implementing a "like" button, where the on click then triggers this method.
      operationId: updateUserInteractions
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInteractionRequest'
        required: true
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInteractionError'
          description: invalid request. User or document id is invalid
      summary: Adds an interaction between the user and the document.
      tags:
      - front office
      x-content-type: application/json
      x-accepts: application/json
  /semantic_search/{document_id}:
    get:
      description: |-
        Returns a list of documents that are semantically similar to the one given as input.
        Each document contains the id, the score and the properties.
        The score is a value between 0 and 1 where a higher value means that the document is more similar to the one in input
      operationId: getSimilarDocuments
      parameters:
      - description: Id of the document
        in: path
        name: document_id
        required: true
        schema:
          $ref: '#/components/schemas/DocumentId'
      - description: Maximum number of semantic similar documents to return
        explode: true
        in: query
        name: count
        required: false
        schema:
          $ref: '#/components/schemas/Count'
        style: form
      - description: Minimum similarity a document has to have to be included.
        explode: true
        in: query
        name: min_similarity
        required: false
        schema:
          default: 0
          format: float
          maximum: 1
          minimum: 0
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SemanticSearchResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
          description: "The request is invalid. Please check the path parameters,\
            \ queries, and the request body."
      summary: Returns documents similar to the given document.
      tags:
      - front office
      x-accepts: application/json
components:
  parameters:
    user_id:
      description: Id of the user
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
    document_id:
      description: Id of the document
      in: path
      name: document_id
      required: true
      schema:
        $ref: '#/components/schemas/DocumentId'
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericError'
      description: "The request is invalid. Please check the path parameters, queries,\
        \ and the request body."
  schemas:
    Count:
      default: 10
      format: int32
      maximum: 100
      minimum: 1
      type: integer
    PersonalizedDocumentData:
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.\\-]+$"
          type: string
        score:
          type: number
        properties:
          $ref: '#/components/schemas/DocumentProperties'
      required:
      - id
      - score
      type: object
    PersonalizedDocuments:
      items:
        $ref: '#/components/schemas/PersonalizedDocumentData'
      maxItems: 100
      minItems: 0
      type: array
    StatelessPersonalizedDocumentsRequest:
      example:
        count: 8
        history:
        - id: valid_id1
          timestamp: 2000-05-14T20:22:50Z
        - id: valid_id1
          timestamp: 2000-05-14T20:22:50Z
        - id: valid_id1
          timestamp: 2000-05-14T20:22:50Z
        - id: valid_id1
          timestamp: 2000-05-14T20:22:50Z
        - id: valid_id1
          timestamp: 2000-05-14T20:22:50Z
        published_after: 2000-05-14T20:22:50Z
      properties:
        history:
          description: |-
            The history is an sequence of entries representing
            documents visited by the user.

            It is ordered from the  "oldest" interaction at index 0 to the "newest" interaction
            at the highest index.

            History entries do not need to have a timestamp, if no timestamp is given it is
            approximated in some way based on timestamps of neighboring documents and if non
            have a timestamp they are all assumed to have happened "just now" for simplicity.
          items:
            $ref: '#/components/schemas/HistoryEntry'
          maxItems: 100
          minItems: 1
          type: array
        count:
          default: 10
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        published_after:
          description: |
            A RFC3339 compatible date-time

            - can be in the future
            - will be converted to and then stored as UTC
            - sub-second resolution is not guaranteed.
            - while `properties.publication_date` is in the future the document will not be
              returned for personalized documents, once it is no longer in the future it will
              automatically be considered for personalization from then on
          example: 2000-05-14T20:22:50Z
          format: date-time
          maxLength: 40
          minLength: 10
          type: string
      required:
      - history
      type: object
    StatelessPersonalizedDocumentsResponse:
      example:
        warnings:
        - historic document with id "document_id1" does not exist
        documents:
        - id: document_id0
          score: 0.87
          properties:
            title: News title
      properties:
        warnings:
          items:
            type: string
          maxItems: 200
          minItems: 0
          type: array
        documents:
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
          maxItems: 100
          minItems: 0
          type: array
      required:
      - documents
      type: object
    PersonalizedDocumentsResponse:
      example:
        documents:
        - id: document_id0
          score: 0.87
          properties:
            title: News title
      properties:
        documents:
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
          maxItems: 100
          minItems: 0
          type: array
      required:
      - documents
      type: object
    SemanticSearchResponse:
      example:
        documents:
        - id: document_id0
          score: 0.87
          properties:
            title: News title
      properties:
        documents:
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
          maxItems: 100
          minItems: 0
          type: array
      required:
      - documents
      type: object
    PersonalizedDocumentsError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - $ref: '#/components/schemas/PersonalizedDocumentsError_allOf'
    UserInteractionType:
      enum:
      - Positive
      type: string
    UserInteractionData:
      example:
        id: valid_id1
        type: null
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.\\-]+$"
          type: string
        type:
          $ref: '#/components/schemas/UserInteractionType'
      type: object
    UserInteractionRequest:
      example:
        documents:
        - id: valid_id1
          type: null
        - id: valid_id1
          type: null
        - id: valid_id1
          type: null
        - id: valid_id1
          type: null
        - id: valid_id1
          type: null
      properties:
        documents:
          items:
            $ref: '#/components/schemas/UserInteractionData'
          maxItems: 1000
          minItems: 1
          type: array
      required:
      - documents
      type: object
    UserInteractionError:
      allOf:
      - $ref: '#/components/schemas/GenericError'
      - $ref: '#/components/schemas/UserInteractionError_allOf'
    GenericError:
      properties:
        request_id:
          description: Request ID optionally generated from the service. It can be
            communicated to xayn to help debugging.
          type: string
        kind:
          description: What kind of error this is.
          type: string
        details:
          description: Additional error details. Might differ depending on debug options.
          type: object
      type: object
    PublicationDate:
      description: |
        A RFC3339 compatible date-time

        - can be in the future
        - will be converted to and then stored as UTC
        - sub-second resolution is not guaranteed.
        - while `properties.publication_date` is in the future the document will not be
          returned for personalized documents, once it is no longer in the future it will
          automatically be considered for personalization from then on
      example: 2000-05-14T20:22:50Z
      format: date-time
      maxLength: 40
      minLength: 10
      type: string
    UserId:
      $ref: '#/components/schemas/Id'
    Id:
      description: "An id can be any non-empty string that consist of digits, latin\
        \ letters, underscores, colons, minus signs, at signs, and dots."
      example: valid_id1
      maxLength: 256
      minLength: 1
      pattern: "^[a-zA-Z0-9_:@.\\-]+$"
      type: string
    DocumentId:
      $ref: '#/components/schemas/Id'
    DocumentProperties:
      additionalProperties: true
      description: Mostly arbitrary properties that can be attached to a document.
        A key must be a valid `DocumentPropertyId`.
      example:
        title: News title
        image_url: http://example.com/news_image.jpg
        link: http://example.com/this_news
      properties:
        publication_date:
          description: |
            A RFC3339 compatible date-time

            - can be in the future
            - will be converted to and then stored as UTC
            - sub-second resolution is not guaranteed.
            - while `properties.publication_date` is in the future the document will not be
              returned for personalized documents, once it is no longer in the future it will
              automatically be considered for personalization from then on
          example: 2000-05-14T20:22:50Z
          format: date-time
          maxLength: 40
          minLength: 10
          type: string
      type: object
    History:
      description: |-
        The history is an sequence of entries representing
        documents visited by the user.

        It is ordered from the  "oldest" interaction at index 0 to the "newest" interaction
        at the highest index.

        History entries do not need to have a timestamp, if no timestamp is given it is
        approximated in some way based on timestamps of neighboring documents and if non
        have a timestamp they are all assumed to have happened "just now" for simplicity.
      items:
        $ref: '#/components/schemas/HistoryEntry'
      maxItems: 100
      minItems: 1
      type: array
    HistoryEntry:
      example:
        id: valid_id1
        timestamp: 2000-05-14T20:22:50Z
      properties:
        id:
          description: "An id can be any non-empty string that consist of digits,\
            \ latin letters, underscores, colons, minus signs, at signs, and dots."
          example: valid_id1
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9_:@.\\-]+$"
          type: string
        timestamp:
          description: |
            A RFC3339 compatible date-time

            - can be in the future
            - will be converted to and then stored as UTC
            - sub-second resolution is not guaranteed.
          example: 2000-05-14T20:22:50Z
          format: date-time
          maxLength: 40
          minLength: 10
          type: string
      required:
      - id
      type: object
    Timestamp:
      description: |
        A RFC3339 compatible date-time

        - can be in the future
        - will be converted to and then stored as UTC
        - sub-second resolution is not guaranteed.
      example: 2000-05-14T20:22:50Z
      format: date-time
      maxLength: 40
      minLength: 10
      type: string
    PersonalizedDocumentsError_allOf:
      properties:
        kind:
          enum:
          - NotEnoughInteractions
          type: string
      required:
      - kind
      type: object
      example: null
    UserInteractionError_allOf:
      properties:
        kind:
          enum:
          - InvalidUserId
          - InvalidDocumentId
          type: string
      required:
      - kind
      type: object
      example: null
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: authorizationToken
      type: apiKey

