openapi: 3.0.3
info:
  description: |-
    # Front Office
    The system identifies a user with only an id.
    There are two main endpoints: one that allows registering an interaction between a user and a document (a user clicked or liked a document), and one to retrieve a personalized set of documents for the user. The system needs a few user interactions with documents before it can generate a personalized list.

    # Auth
    To authenticate with the API, a token will be provided.
  title: Front Office API
  version: 1.0.0
servers:
- url: /
security:
- ApiKeyAuth: []
tags:
- description: Interaction of the user and personalized document.
  name: front office
paths:
  /users/{user_id}/personalized_documents:
    get:
      description: |-
        Returns a list of documents personalized for the given `user_id`.
        Each document contains the id, the score and the properties that are attached to the document.
        The score is a value between 0 and 1 where a higher value means that the document matches the preferences of the user better.
      operationId: getPersonalizedDocuments
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      - description: Maximum number of personalized documents to return
        explode: true
        in: query
        name: count
        required: false
        schema:
          default: 10
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsResponse'
          description: successful operation
        "400":
          description: invalid user id.
        "404":
          description: user not found.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonalizedDocumentsError'
          description: impossible to create a personalized list for the user.
      summary: Get personalized documents for the user
      tags:
      - front office
      x-accepts: application/json
  /users/{user_id}/interactions:
    patch:
      description: The interaction is used to provide personalized documents to the
        user.
      operationId: documentInteraction
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInteractionRequest'
      responses:
        "204":
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInteractionError'
          description: invalid request. User or document id is invalid
      summary: Add interaction between a user and a document
      tags:
      - front office
      x-content-type: application/json
      x-accepts: application/json
components:
  parameters:
    user_id:
      description: Id of the user
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/UserId'
  schemas:
    PersonalizedDocumentData:
      example:
        score: 0.8008281904610115
        id: document_id
        properties:
          title: News title
          image_url: http://example.com/news_image.jpg
          link: http://example.com/this_news
      properties:
        id:
          description: |-
            A document id can be any non-empty UTF-8 string that does not contain the null byte.
            It may consist of digits, Latin letters, underscores, colons, minus signs, at signs, and dots.
          example: document_id
          type: string
        score:
          type: number
        properties:
          additionalProperties:
            $ref: '#/components/schemas/DocumentProperty'
          description: Arbitrary properties that can be attached to a document. A
            key must be a valid `DocumentPropertyId`.
          example:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
          type: object
      required:
      - id
      - score
      type: object
    PersonalizedDocumentsResponse:
      example:
        documents:
        - score: 0.8008281904610115
          id: document_id
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
        - score: 0.8008281904610115
          id: document_id
          properties:
            title: News title
            image_url: http://example.com/news_image.jpg
            link: http://example.com/this_news
      properties:
        documents:
          items:
            $ref: '#/components/schemas/PersonalizedDocumentData'
          type: array
      required:
      - documents
      type: object
    PersonalizedDocumentsError:
      allOf:
      - $ref: '#/components/schemas/BaseError'
      - $ref: '#/components/schemas/PersonalizedDocumentsError_allOf'
    UserInteractionType:
      enum:
      - positive
      type: string
    UserInteractionData:
      example:
        id: document_id
        type: null
      properties:
        id:
          description: |-
            A document id can be any non-empty UTF-8 string that does not contain the null byte.
            It may consist of digits, Latin letters, underscores, colons, minus signs, at signs, and dots.
          example: document_id
          type: string
        type:
          $ref: '#/components/schemas/UserInteractionType'
      type: object
    UserInteractionRequest:
      example:
        documents:
        - id: document_id
          type: null
        - id: document_id
          type: null
      properties:
        documents:
          items:
            $ref: '#/components/schemas/UserInteractionData'
          type: array
      required:
      - documents
      type: object
    UserInteractionError:
      allOf:
      - $ref: '#/components/schemas/BaseError'
      - $ref: '#/components/schemas/UserInteractionError_allOf'
    UserId:
      description: |-
        A user id can be any non-empty UTF-8 string that does not contain the null byte.
        It may consist of digits, Latin letters, underscores, colons, minus signs, at signs, and dots.
      example: user_id
      type: string
    DocumentId:
      description: |-
        A document id can be any non-empty UTF-8 string that does not contain the null byte.
        It may consist of digits, Latin letters, underscores, colons, minus signs, at signs, and dots.
      example: document_id
      type: string
    DocumentProperties:
      additionalProperties:
        $ref: '#/components/schemas/DocumentProperty'
      description: Arbitrary properties that can be attached to a document. A key
        must be a valid `DocumentPropertyId`.
      example:
        title: News title
        image_url: http://example.com/news_image.jpg
        link: http://example.com/this_news
      type: object
    DocumentProperty:
      description: Arbitrary property that can be attached to a document.
      example: News title
    BaseError:
      properties:
        request_id:
          description: Request ID optionally generated from the service. It can be
            communicated to xayn to help debugging.
          type: string
        kind:
          description: What kind of error this is.
          type: string
        details:
          description: Additional error details. Might differ depending on debug options.
          type: object
      required:
      - kind
      - request_id
      type: object
    PersonalizedDocumentsError_allOf:
      properties:
        kind:
          enum:
          - NotEnoughInteractions
          type: string
      required:
      - kind
      type: object
      example: null
    UserInteractionError_allOf:
      properties:
        kind:
          enum:
          - InvalidUserId
          - InvalidDocumentId
          type: string
      required:
      - kind
      type: object
      example: null
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: authorizationToken
      type: apiKey

